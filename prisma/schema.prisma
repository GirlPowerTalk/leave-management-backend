// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

////////////////////////////////  Users ///////////////////////////////////
model Users {
   id                       Int                        @id @default(autoincrement())
   firstName                String
   lastName                 String
   email                    String                     @unique
   role                     UserRole                   @default(employee)
   employeeType             UserType                   @default(permanent)
   isActive                 Boolean                    @default(true)
   designation              String?
   department               String?
   picture                  String?
   reportingHrId            Int?
   reportingHr              Users?                     @relation("hrRelation", fields: [reportingHrId], references: [id])
   employees                Users[]                    @relation("hrRelation")
   formatId                 Int?
   format                   LeaveFormat?               @relation(fields: [formatId], references: [id])
   userLeave                UserLeave[]
   leaveApplication         LeaveApplication[]
   leaveApplicationCalender LeaveApplicationCalender[]
   workFormHomeApplication  WorkFormHomeApplication[]
   wfhApplicationCalender   WfhApplicationCalender[]
   userMeta                 UserMeta[]
   userAuth                 UserAuth?
   createdAt                DateTime                   @default(now())
   updatedAt                DateTime                   @default(now()) @updatedAt

   @@index([id, email])
}

model UserMeta {
   id     Int    @id @default(autoincrement())
   userId Int
   user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   key    String
   value  String

   @@unique([userId, key])
}

model UserAuth {
   id        Int      @id @default(autoincrement())
   userId    Int      @unique
   user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   method    String
   password  String
   createdAt DateTime @default(now())
   updatedAt DateTime @default(now()) @updatedAt
}

////////////////////// UserLeaves //////////////////

model UserLeave {
   id            Int        @id @default(autoincrement())
   userId        Int
   user          Users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   leaveTypeId   Int?
   leaveType     LeaveType? @relation(fields: [leaveTypeId], references: [id])
   totalLeaves   Int        @default(0)
   pendingLeaves Int        @default(0)
   createdAt     DateTime   @default(now())
   updatedAt     DateTime   @default(now()) @updatedAt

   @@unique([userId, leaveTypeId])
}

//////////////////////   Leave //////////////////
model LeaveFormat {
   id                Int                 @id @default(autoincrement())
   name              String              @unique
   description       String?
   leaveRelationship LeaveRelationship[]
   userId            Users[]
   createdAt         DateTime            @default(now())
   updatedAt         DateTime            @default(now()) @updatedAt
}

model LeaveType {
   id                       Int                        @id @default(autoincrement())
   name                     String                     @unique
   code                     String                     @unique
   description              String?
   frequency                LeaveFrequency             @default(yearly)
   addon                    Boolean                    @default(true)
   for                      LeaveFor                   @default(all)
   leaveRelationship        LeaveRelationship[]
   userLeave                UserLeave[]
   leaveApplicationDetails  LeaveApplicationDetails[]
   leaveApplicationCalender LeaveApplicationCalender[]
   WfhApplicationCalender   WfhApplicationCalender[]
   createdAt                DateTime                   @default(now())
   updatedAt                DateTime                   @default(now()) @updatedAt
}

model LeaveRelationship {
   id           Int         @id @default(autoincrement())
   formatId     Int
   format       LeaveFormat @relation(fields: [formatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   typeId       Int
   type         LeaveType   @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   leaveGiven   Float       @default(0.00)
   quarterOne   Float       @default(0.00)
   quarterTwo   Float       @default(0.00)
   quarterThree Float       @default(0.00)
   quarterFour  Float       @default(0.00)
   createdAt    DateTime    @default(now())
   updatedAt    DateTime    @default(now()) @updatedAt

   @@unique([formatId, typeId])
}

////////////////////// Application //////////////////

model LeaveApplication {
   id                       Int                        @id @default(autoincrement())
   userId                   Int
   user                     Users                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   subject                  String
   reason                   String
   comment                  String                     @default("")
   status                   ApplicationStatus          @default(pending)
   leaveApplicationDetails  LeaveApplicationDetails[]
   leaveApplicationCalender LeaveApplicationCalender[]
   createdAt                DateTime                   @default(now())
   updatedAt                DateTime                   @default(now()) @updatedAt

   @@unique([id, userId])
}

model LeaveApplicationDetails {
   id            Int              @id @default(autoincrement())
   applicationId Int
   application   LeaveApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   leaveTypeId   Int
   leaveType     LeaveType        @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   leaveCount    Int
   leaveDates    Json
   createdAt     DateTime         @default(now())
}

model LeaveApplicationCalender {
   id            Int               @id @default(autoincrement())
   userId        Int
   user          Users             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   leaveTypeId   Int
   leaveType     LeaveType         @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   applicationId Int
   application   LeaveApplication  @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   status        ApplicationStatus @default(pending)
   leaveDate     DateTime
   createdAt     DateTime          @default(now())
   updatedAt     DateTime          @default(now()) @updatedAt
}

// /////////////////    Work Form Application   //////////////

model WorkFormHomeApplication {
   id                     Int                      @id @default(autoincrement())
   userId                 Int
   user                   Users                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   subject                String
   reason                 String
   wfhDetails             Json
   comment                String                   @default("")
   status                 ApplicationStatus        @default(pending)
   wfhApplicationCalender WfhApplicationCalender[]
   // leaveApplicationDetails  LeaveApplicationDetails[]
   // leaveApplicationCalender LeaveApplicationCalender[]
   createdAt              DateTime                 @default(now())
   updatedAt              DateTime                 @default(now()) @updatedAt

   @@unique([id, userId])
}

model WfhApplicationCalender {
   id            Int                     @id @default(autoincrement())
   userId        Int
   user          Users                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   leaveTypeId   Int
   leaveType     LeaveType               @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   applicationId Int
   application   WorkFormHomeApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   status        ApplicationStatus       @default(pending)
   leaveDate     DateTime
   createdAt     DateTime                @default(now())
   updatedAt     DateTime                @default(now()) @updatedAt
}

/////////////////////////////////////////////

enum UserType {
   probationary
   permanent
   noticePeriod
}

enum UserRole {
   admin
   humanResources
   employee
}

enum LeaveFrequency {
   daily
   weekly
   monthly
   yearly
}

enum ApplicationStatus {
   pending
   approved
   rejected
   cancelled
}

enum LeaveFor {
   all
   male
   female
   other
}

/////////////////////////   Settings //////////////////////////

// model Settings {
//    id        Int      @id @default(autoincrement())
//    key       String   @unique
//    value     String
//    createdAt DateTime @default(now())
//    updatedAt DateTime @default(now()) @updatedAt
// }

model Holidays {
   id          Int      @id @default(autoincrement())
   name        String   @unique
   date        DateTime
   year        Int?
   description String?
   festive     Boolean  @default(false)
   createdAt   DateTime @default(now())
   updatedAt   DateTime @default(now()) @updatedAt
}
